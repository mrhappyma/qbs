// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Match {
    id        String  @id @default(cuid())
    name      String
    scores    String
    // convert data to string every time saving
    // i know. it's bad.
    createdAt String
    updatedAt String
    Team1     Team?   @relation(name: "Team1Team", fields: [team1Id], references: [id])
    team1Id   String?
    Team2     Team?   @relation(name: "Team2Team", fields: [team2Id], references: [id])
    team2Id   String?
    owner     User    @relation(fields: [userId], references: [id], name: "matches")
    userId    String
    scorers   User[]  @relation("MatchScorers")
}

model Team {
    id             String  @id @default(cuid())
    createdAt      String
    updatedAt      String
    name           String
    logoUrl        String?
    color1         String?
    color2         String?
    MatchesAsTeam1 Match[] @relation(name: "Team1Team")
    MatchesAsTeam2 Match[] @relation(name: "Team2Team")
    owner          User    @relation(fields: [userId], references: [id])
    userId         String
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id             String    @id @default(cuid())
    name           String?
    email          String?   @unique
    emailVerified  DateTime?
    image          String?
    accounts       Account[]
    sessions       Session[]
    matches        Match[]   @relation("matches")
    teams          Team[]
    scoringMatches Match?    @relation(fields: [matchId], references: [id], name: "MatchScorers")
    matchId        String?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
